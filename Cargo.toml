# ================================================================================================
# NEAR SMART CONTRACT PROJECT CONFIGURATION
# ================================================================================================
# This Cargo.toml file configures a NEAR Protocol smart contract project.
# For backend engineers new to Rust, think of this as similar to:
# - package.json for Node.js projects
# - pom.xml for Java Maven projects
# - requirements.txt for Python projects

# Project metadata - similar to any Rust project
[package]
name = "near-twitter-example-rs"                                              # Contract name (must match directory name)
description = "A Twitter-like social media platform built on NEAR blockchain" # Project description
version = "0.1.0"                                                             # Semantic versioning (major.minor.patch)
edition = "2021"                                                              # Rust edition (language features available)
repository = "https://github.com/<your-username>/<your-repo>"

[lib]
crate-type = ["cdylib", "rlib"]

# ================================================================================================
# REPRODUCIBLE BUILD CONFIGURATION (NEP-0330)
# ================================================================================================
# This section ensures that anyone can rebuild your contract and get identical WASM bytecode.
# Similar to how Docker ensures consistent environments across deployments.
#
# Why reproducible builds matter in blockchain:
# 1. TRUST: Users can verify deployed contract matches published source code
# 2. SECURITY: Prevents supply chain attacks during build process
# 3. TRANSPARENCY: Anyone can audit the exact build process used
#
# This is like having a verified Docker image with pinned dependencies
[package.metadata.near.reproducible_build]

# Docker image used for building (locked to specific version for consistency)
# Similar to specifying exact Node.js version in Dockerfile: FROM node:18.17.0
image = "sourcescan/cargo-near:0.13.3-rust-1.84.1"

# SHA256 digest ensures we use exact same image (prevents image tampering)
# Like Docker image digests: docker pull ubuntu@sha256:abc123...
image_digest = "sha256:baa712c5d2b7522d38175e36330d336ad2c4ce32bfaaa41af94ce40407ecd803"

# Environment variables that can affect build (currently none for maximum reproducibility)
# In traditional CI/CD, you might pass BUILD_ENV, API_KEYS, etc.
# For reproducible builds, we minimize external variables
passed_env = []

# Exact build command executed inside Docker container
# Similar to RUN commands in Dockerfile or build scripts in package.json
container_build_command = [
    "cargo",                 # Rust package manager (like npm, maven, pip)
    "near",                  # NEAR-specific build tool
    "build",                 # Build command
    "non-reproducible-wasm", # Build type (faster for development)
    "--locked",              # Use exact dependency versions from Cargo.lock
]

[dependencies]
# NEAR SDK - The main framework for building NEAR smart contracts
# This is like Express.js for Node.js or Spring Boot for Java
near-sdk = "5.14.0"

[dev-dependencies]
near-sdk = { version = "5.14.0", features = ["unit-testing"] }

[profile.release]
# Compile entire crate as single unit (slower build, smaller/faster WASM)
# Like bundling entire JavaScript app into single file for production
codegen-units = 1

# Optimize for size rather than speed ("z" = maximum size optimization)
# Critical for blockchain where storage/bandwidth costs real money
# Similar to minifying JavaScript/CSS for web deployment
opt-level = "z"

# Link Time Optimization - optimize across crate boundaries
# Like dead code elimination and tree shaking in JavaScript bundlers
lto = true

# Remove debug symbols to reduce WASM size
# Similar to stripping debug info from production binaries
debug = false

# Abort on panic rather than unwinding (smaller WASM size)
# In blockchain, panics revert transactions anyway
# Like fail-fast behavior in distributed systems
panic = "abort"

# Enable overflow checks even in release mode for safety
# Prevents integer overflow bugs that could drain contract funds
# Similar to keeping input validation in production builds
overflow-checks = true
